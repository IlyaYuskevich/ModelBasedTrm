package M1_4_ScenarioPlanning.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BusinessDriver_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Casual_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new CheckPoint_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Influence_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new KPI_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new KpiModel_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new LinkEditor_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Product_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new RoadmapEditor_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new ScenarioShift_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Service_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new SimulationEditor_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Technology_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x5ff61aa790335c9dL), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x12ac17505577641L), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x5ff61aa790335ca3L), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x5ff61aa790335ca5L), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x12ac17505633a26L), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x12ac17505635673L), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x12ac1750551e8a1L), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x5ff61aa790335c9fL), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x5fd117c68b5e1854L), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x5ff61aa790335ca4L), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x5ff61aa790335ca2L), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x12ac1750585993bL), MetaIdFactory.conceptId(0xaee53256d5314aefL, 0xa69aa7f9142b644dL, 0x5ff61aa790335c9eL)).seal();
}
