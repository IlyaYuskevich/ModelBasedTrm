package M2_AbstractLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Attribute_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AttributeValue_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Dimensions_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Epoch_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Level_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Scenario_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        if (true) {
          if ("M2_AbstractLanguage.editor.DimensionsWithoutTimeDef".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new DimensionsWithoutTimeDef());
          }
        }
        break;
      case 1:
        if (true) {
          switch (editorComponentId) {
            case "M2_AbstractLanguage.editor.ElementClassOffDef":
              return Collections.<ConceptEditorComponent>singletonList(new ElementClassOffDef());
            case "M2_AbstractLanguage.editor.ElementDef":
              return Collections.<ConceptEditorComponent>singletonList(new ElementDef());
            case "M2_AbstractLanguage.editor.ElementEndDateClassOffDef":
              return Collections.<ConceptEditorComponent>singletonList(new ElementEndDateClassOffDef());
            default:
              return Collections.<ConceptEditorComponent>emptyList();
          }
        }
        break;
      case 2:
        if (true) {
          if ("M2_AbstractLanguage.editor.ElementClassDef".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new ElementClassDef());
          }
        }
        break;
      case 3:
        if (true) {
          if ("M2_AbstractLanguage.editor.LinkDef".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new LinkDef());
          }
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }

  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new AttributeValue_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x4b68402a1c7b472dL, 0x8c517b3c81719d43L, 0x7157f84cd376c8d0L), MetaIdFactory.conceptId(0x4b68402a1c7b472dL, 0x8c517b3c81719d43L, 0x7157f84cd378a96fL), MetaIdFactory.conceptId(0x4b68402a1c7b472dL, 0x8c517b3c81719d43L, 0x7157f84cd378a935L), MetaIdFactory.conceptId(0x4b68402a1c7b472dL, 0x8c517b3c81719d43L, 0x7157f84cd378a93dL), MetaIdFactory.conceptId(0x4b68402a1c7b472dL, 0x8c517b3c81719d43L, 0x7157f84cd378a93bL), MetaIdFactory.conceptId(0x4b68402a1c7b472dL, 0x8c517b3c81719d43L, 0x7157f84cd378a93cL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x4b68402a1c7b472dL, 0x8c517b3c81719d43L, 0x7157f84cd378a935L), MetaIdFactory.conceptId(0x4b68402a1c7b472dL, 0x8c517b3c81719d43L, 0x7157f84cd39fdab8L), MetaIdFactory.conceptId(0x4b68402a1c7b472dL, 0x8c517b3c81719d43L, 0x7157f84cd376c8ceL), MetaIdFactory.conceptId(0x4b68402a1c7b472dL, 0x8c517b3c81719d43L, 0x7157f84cd376c8cfL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x4b68402a1c7b472dL, 0x8c517b3c81719d43L, 0x7157f84cd378a96fL)).seal();
}
