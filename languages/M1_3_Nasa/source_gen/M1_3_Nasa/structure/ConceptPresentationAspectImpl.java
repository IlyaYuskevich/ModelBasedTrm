package M1_3_Nasa.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Capability;
  private ConceptPresentation props_CapabilityCurrent;
  private ConceptPresentation props_CapabilityCurrentParameter;
  private ConceptPresentation props_CapabilityTarget;
  private ConceptPresentation props_CapabilityTargetParameter;
  private ConceptPresentation props_ClassifierEditor;
  private ConceptPresentation props_Enables;
  private ConceptPresentation props_Enhances;
  private ConceptPresentation props_Launch;
  private ConceptPresentation props_Mission;
  private ConceptPresentation props_Need;
  private ConceptPresentation props_Requires;
  private ConceptPresentation props_RoadmapEditor;
  private ConceptPresentation props_Technology1;
  private ConceptPresentation props_TechnologyArea;
  private ConceptPresentation props_TechnologyClass;
  private ConceptPresentation props_TechnologyCurrent;
  private ConceptPresentation props_TechnologyCurrentParameter;
  private ConceptPresentation props_TechnologyEditor;
  private ConceptPresentation props_TechnologyFamily;
  private ConceptPresentation props_TechnologyTarget;
  private ConceptPresentation props_TechnologyTargetParameter;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Capability:
        if (props_Capability == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Capability = cpb.create();
        }
        return props_Capability;
      case LanguageConceptSwitch.CapabilityCurrent:
        if (props_CapabilityCurrent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CapabilityCurrent = cpb.create();
        }
        return props_CapabilityCurrent;
      case LanguageConceptSwitch.CapabilityCurrentParameter:
        if (props_CapabilityCurrentParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Capability Current Parameter");
          props_CapabilityCurrentParameter = cpb.create();
        }
        return props_CapabilityCurrentParameter;
      case LanguageConceptSwitch.CapabilityTarget:
        if (props_CapabilityTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CapabilityTarget = cpb.create();
        }
        return props_CapabilityTarget;
      case LanguageConceptSwitch.CapabilityTargetParameter:
        if (props_CapabilityTargetParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Parameter");
          props_CapabilityTargetParameter = cpb.create();
        }
        return props_CapabilityTargetParameter;
      case LanguageConceptSwitch.ClassifierEditor:
        if (props_ClassifierEditor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ClassifierEditor");
          props_ClassifierEditor = cpb.create();
        }
        return props_ClassifierEditor;
      case LanguageConceptSwitch.Enables:
        if (props_Enables == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("enables");
          props_Enables = cpb.create();
        }
        return props_Enables;
      case LanguageConceptSwitch.Enhances:
        if (props_Enhances == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("enhances");
          props_Enhances = cpb.create();
        }
        return props_Enhances;
      case LanguageConceptSwitch.Launch:
        if (props_Launch == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Launch = cpb.create();
        }
        return props_Launch;
      case LanguageConceptSwitch.Mission:
        if (props_Mission == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Mission = cpb.create();
        }
        return props_Mission;
      case LanguageConceptSwitch.Need:
        if (props_Need == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Need = cpb.create();
        }
        return props_Need;
      case LanguageConceptSwitch.Requires:
        if (props_Requires == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("requires");
          props_Requires = cpb.create();
        }
        return props_Requires;
      case LanguageConceptSwitch.RoadmapEditor:
        if (props_RoadmapEditor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RoadmapEditor");
          props_RoadmapEditor = cpb.create();
        }
        return props_RoadmapEditor;
      case LanguageConceptSwitch.Technology1:
        if (props_Technology1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Technology1 = cpb.create();
        }
        return props_Technology1;
      case LanguageConceptSwitch.TechnologyArea:
        if (props_TechnologyArea == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TechnologyArea = cpb.create();
        }
        return props_TechnologyArea;
      case LanguageConceptSwitch.TechnologyClass:
        if (props_TechnologyClass == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TechnologyClass = cpb.create();
        }
        return props_TechnologyClass;
      case LanguageConceptSwitch.TechnologyCurrent:
        if (props_TechnologyCurrent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TechnologyCurrent = cpb.create();
        }
        return props_TechnologyCurrent;
      case LanguageConceptSwitch.TechnologyCurrentParameter:
        if (props_TechnologyCurrentParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Technology Parameter");
          props_TechnologyCurrentParameter = cpb.create();
        }
        return props_TechnologyCurrentParameter;
      case LanguageConceptSwitch.TechnologyEditor:
        if (props_TechnologyEditor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TechnologyEditor = cpb.create();
        }
        return props_TechnologyEditor;
      case LanguageConceptSwitch.TechnologyFamily:
        if (props_TechnologyFamily == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TechnologyFamily = cpb.create();
        }
        return props_TechnologyFamily;
      case LanguageConceptSwitch.TechnologyTarget:
        if (props_TechnologyTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TechnologyTarget = cpb.create();
        }
        return props_TechnologyTarget;
      case LanguageConceptSwitch.TechnologyTargetParameter:
        if (props_TechnologyTargetParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Technology Parameter");
          props_TechnologyTargetParameter = cpb.create();
        }
        return props_TechnologyTargetParameter;
    }
    return null;
  }
}
