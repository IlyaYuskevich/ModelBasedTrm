package M1_3_Nasa.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new CapabilityCurrentParameter_Constraints();
      case 1:
        return new Enables_Constraints();
      case 2:
        return new Enhances_Constraints();
      case 3:
        return new Requires_Constraints();
      case 4:
        return new TechnologyArea_Constraints();
      case 5:
        return new TechnologyFamily_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x5af350f1d17747fcL, 0x845f9e68de691f89L, 0x12786cdabf374400L), MetaIdFactory.conceptId(0x5af350f1d17747fcL, 0x845f9e68de691f89L, 0x4742492ef732456cL), MetaIdFactory.conceptId(0x5af350f1d17747fcL, 0x845f9e68de691f89L, 0x5ff61aa79018eff1L), MetaIdFactory.conceptId(0x5af350f1d17747fcL, 0x845f9e68de691f89L, 0x4742492ef732456dL), MetaIdFactory.conceptId(0x5af350f1d17747fcL, 0x845f9e68de691f89L, 0x12ac175056f7ad3L), MetaIdFactory.conceptId(0x5af350f1d17747fcL, 0x845f9e68de691f89L, 0x12ac175056f7ad5L)).seal();
}
