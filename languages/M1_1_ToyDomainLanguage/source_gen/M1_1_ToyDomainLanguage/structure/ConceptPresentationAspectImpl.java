package M1_1_ToyDomainLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ElementClassList;
  private ConceptPresentation props_ElementList;
  private ConceptPresentation props_ElementTrm;
  private ConceptPresentation props_Evolve;
  private ConceptPresentation props_ProductClass;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ElementClassList:
        if (props_ElementClassList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ElementClassList = cpb.create();
        }
        return props_ElementClassList;
      case LanguageConceptSwitch.ElementList:
        if (props_ElementList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ElementList = cpb.create();
        }
        return props_ElementList;
      case LanguageConceptSwitch.ElementTrm:
        if (props_ElementTrm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ElementTrm = cpb.create();
        }
        return props_ElementTrm;
      case LanguageConceptSwitch.Evolve:
        if (props_Evolve == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("evolves to");
          props_Evolve = cpb.create();
        }
        return props_Evolve;
      case LanguageConceptSwitch.ProductClass:
        if (props_ProductClass == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ProductClass = cpb.create();
        }
        return props_ProductClass;
    }
    return null;
  }
}
